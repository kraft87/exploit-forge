from collections import deque


def subset_sum_iterative(numbers, target):
    if target == 0:
        return []

    queue = deque(
        [([], 0, 0)]
    )  # Initialize the queue with an empty subset, its sum, and starting index

    while queue:
        partial_subset, partial_sum, start_index = queue.popleft()
        # print(queue)
        # print(partial_subset, partial_sum, start_index)
        if partial_sum == target:
            return partial_subset

        if partial_sum < target:
            for i, num in enumerate(numbers[start_index:], start_index):
                new_subset = partial_subset + [num]
                new_sum = partial_sum + num
                print(new_subset)
                if new_sum <= target:
                    queue.append((new_subset, new_sum, i + 1))

    return None


# Example usage:
numbers = [50, 1, 2, 3, 4]
# numbers.sort()
target = 11
result = subset_sum_iterative(numbers, target)

if result is not None:
    print("Subset found:", result)
else:
    print("No subset found.")
